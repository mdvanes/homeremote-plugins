// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Core = require("@material-ui/core");
var MaterialUi_Checkbox = require("@jsiebern/bs-material-ui/src/MaterialUi_Checkbox.bs.js");
var MaterialUi_IconButton = require("@jsiebern/bs-material-ui/src/MaterialUi_IconButton.bs.js");
var DockerListModuleCss = require("./DockerList.module.css");
var $$Error = require("@material-ui/icons/Error").default;
var DockerUtil$MdworldHomeremoteDockerlist = require("./DockerUtil.bs.js");

var styles = DockerListModuleCss;

var ErrorIcon = {};

function DockerListItem2(Props) {
  var container = Props.container;
  var id = container.Id;
  var state = container.State;
  var status = container.Status;
  var isRunning = state === "running";
  var isExited = state === "exited";
  var isUnexpected = !isRunning && !isExited;
  DockerUtil$MdworldHomeremoteDockerlist.toClassName([
        {
          TAG: /* Name */0,
          _0: styles["button-list-item"]
        },
        {
          TAG: /* Name */0,
          _0: styles["mui-button"]
        },
        {
          TAG: /* NameOn */1,
          _0: styles["button-error"],
          _1: isUnexpected
        }
      ]);
  var match = React.useState(function () {
        return false;
      });
  var setIsOpen = match[1];
  var name = container.Names.map(function (name) {
          return name.slice(1);
        }).join(" ");
  return React.createElement("div", undefined, React.createElement(Core.ListItem, {
                  button: true,
                  children: null,
                  onClick: (function (_ev) {
                      return Curry._1(setIsOpen, (function (_prev) {
                                    return true;
                                  }));
                    })
                }, React.createElement(Core.ListItemIcon, {
                      children: React.createElement(Core.Checkbox, {
                            edge: MaterialUi_Checkbox.Edge.start,
                            checked: isRunning,
                            inputProps: {
                              "aria-labelledby": id
                            }
                          })
                    }), React.createElement(Core.ListItemText, {
                      primary: name,
                      secondary: status,
                      id: id
                    }), React.createElement(Core.ListItemIcon, {
                      children: React.createElement(Core.IconButton, {
                            children: React.createElement($$Error, {
                                  color: "error"
                                }),
                            edge: MaterialUi_IconButton.Edge._end
                          })
                    })), React.createElement(Core.Dialog, {
                  aria_labelledby: "simple-dialog-title",
                  children: null,
                  open: match[0]
                }, React.createElement(Core.DialogTitle, {
                      children: name + " (" + state + ")",
                      id: "simple-dialog-title"
                    }), React.createElement(Core.DialogContent, {
                      children: React.createElement(Core.Typography, {
                            children: status
                          })
                    }), React.createElement(Core.DialogActions, {
                      children: null
                    }, React.createElement(Core.Button, {
                          onClick: (function (_ev) {
                              return Curry._1(setIsOpen, (function (_prev) {
                                            return false;
                                          }));
                            }),
                          children: "cancel",
                          color: "secondary"
                        }), React.createElement(Core.Button, {
                          children: "OK",
                          color: "primary"
                        }))));
}

var make = DockerListItem2;

exports.styles = styles;
exports.ErrorIcon = ErrorIcon;
exports.make = make;
/* styles Not a pure module */
