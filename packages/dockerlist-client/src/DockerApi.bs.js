// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");

function handleResponse(promise, onError, errorMessage) {
  var __x = promise.then(function (jsonResponse) {
        var response = JSON.parse(jsonResponse);
        var match = response.status;
        if (match === "received") {
          return Promise.resolve(response.containers);
        } else {
          return Js_exn.raiseError("Error in response");
        }
      });
  return __x.catch(function (err) {
              Curry._1(onError, errorMessage + " " + err);
              return Promise.resolve([]);
            });
}

function getDockerList(url, onError) {
  var __x = fetch(url + "/api/dockerlist");
  return handleResponse(__x.then(function (prim) {
                  return prim.text();
                }), onError, "error in getDockerList");
}

function startContainer(url, id, onError) {
  var __x = fetch(url + "/api/dockerlist/start/" + id);
  return handleResponse(__x.then(function (prim) {
                  return prim.text();
                }), onError, "error in startContainer");
}

function stopContainer(url, id, onError) {
  var __x = fetch(url + "/api/dockerlist/stop/" + id);
  return handleResponse(__x.then(function (prim) {
                  return prim.text();
                }), onError, "error in stopContainer");
}

exports.handleResponse = handleResponse;
exports.getDockerList = getDockerList;
exports.startContainer = startContainer;
exports.stopContainer = stopContainer;
/* No side effect */
