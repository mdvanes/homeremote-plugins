// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");

function handleResponse(promise, onError, errorMessage) {
  var __x = promise.then(function (jsonResponse) {
        var response = JSON.parse(jsonResponse);
        var match = response.status;
        if (match === "received") {
          return Promise.resolve(response.containers);
        } else {
          return Js_exn.raiseError("Error in response");
        }
      });
  return __x.catch(function (err) {
              Curry._1(onError, errorMessage + " " + err);
              return Promise.resolve([]);
            });
}

function getDockerList(url, onError) {
  var __x = fetch(url + "/api/dockerlist");
  return handleResponse(__x.then(function (prim) {
                  return prim.text();
                }), onError, "error in getDockerList");
}

function startContainer(url, id, onError) {
  var __x = fetch(url + "/api/dockerlist/start/" + id);
  return handleResponse(__x.then(function (prim) {
                  return prim.text();
                }), onError, "error in startContainer");
}

function stopContainer(url, id, onError) {
  var __x = fetch(url + "/api/dockerlist/stop/" + id);
  return handleResponse(__x.then(function (prim) {
                  return prim.text();
                }), onError, "error in stopContainer");
}

function toggleContainerStateCreator(setContainers, url, onError, setIsLoading) {
  var startContainerWithJustId = function (__x) {
    return startContainer(url, __x, onError);
  };
  var stopContainerWithJustId = function (__x) {
    return stopContainer(url, __x, onError);
  };
  return function (container) {
    Curry._1(setIsLoading, (function (_prev) {
            return true;
          }));
    var state = container.State;
    var id = container.Id;
    var isRunning = state === "running";
    var action = isRunning ? stopContainerWithJustId : startContainerWithJustId;
    var __x = Curry._1(action, id);
    var __x$1 = __x.then(function (_response) {
          return getDockerList(url, onError);
        });
    return __x$1.then(function (containerList) {
                Curry._1(setContainers, (function (_prev) {
                        return containerList;
                      }));
                Curry._1(setIsLoading, (function (_prev) {
                        return false;
                      }));
                return Promise.resolve(containerList);
              });
  };
}

exports.handleResponse = handleResponse;
exports.getDockerList = getDockerList;
exports.startContainer = startContainer;
exports.stopContainer = stopContainer;
exports.toggleContainerStateCreator = toggleContainerStateCreator;
/* No side effect */
