// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";

function getDockerList(url, onError) {
  var __x = fetch(url + "/api/dockerlist").then(function (prim) {
        return prim.text();
      });
  var __x$1 = __x.then(function (jsonResponse) {
        var response = JSON.parse(jsonResponse);
        if (response.status === "received") {
          return Promise.resolve(response.containers);
        } else {
          return Js_exn.raiseError("Invalid getDockerList response");
        }
      });
  return __x$1.catch(function (_err) {
              Curry._1(onError, "error in getDockerList");
              return Promise.resolve([]);
            });
}

function startContainer(url, id, onError) {
  var __x = fetch(url + "/api/dockerlist/start/" + id).then(function (prim) {
        return prim.text();
      });
  var __x$1 = __x.then(function (jsonResponse) {
        var response = JSON.parse(jsonResponse);
        if (response.status === "received") {
          return Promise.resolve(response.containers);
        } else {
          return Js_exn.raiseError("Invalid startContainer response");
        }
      });
  return __x$1.catch(function (_err) {
              Curry._1(onError, "error in startContainer");
              return Promise.resolve([]);
            });
}

function stopContainer(url, id, onError) {
  var __x = fetch(url + "/api/dockerlist/stop/" + id).then(function (prim) {
        return prim.text();
      });
  var __x$1 = __x.then(function (jsonResponse) {
        var response = JSON.parse(jsonResponse);
        if (response.status === "received") {
          return Promise.resolve(response.containers);
        } else {
          return Js_exn.raiseError("Invalid stopContainer response");
        }
      });
  return __x$1.catch(function (_err) {
              Curry._1(onError, "error in stopContainer");
              return Promise.resolve([]);
            });
}

export {
  getDockerList ,
  startContainer ,
  stopContainer ,
  
}
/* No side effect */
