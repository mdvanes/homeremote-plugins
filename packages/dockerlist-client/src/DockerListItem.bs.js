// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var DockerListModuleCss = require("./DockerList.module.css");
var SVGCheck$MdworldHomeremoteDockerlist = require("./Svgs/SVGCheck.bs.js");
var SVGCross$MdworldHomeremoteDockerlist = require("./Svgs/SVGCross.bs.js");
var DockerApi$MdworldHomeremoteDockerlist = require("./DockerApi.bs.js");
var DockerUtil$MdworldHomeremoteDockerlist = require("./DockerUtil.bs.js");
var ButtonWithConfirm$MdworldHomeremoteDockerlist = require("./ButtonWithConfirm.bs.js");

var styles = DockerListModuleCss;

function DockerListItem(Props) {
  var url = Props.url;
  var container = Props.container;
  var setContainers = Props.setContainers;
  var confirmButtonStyle = Props.confirmButtonStyle;
  var onError = Props.onError;
  var id = container.Id;
  var state = container.State;
  var isRunning = state === "running";
  var isExited = state === "exited";
  var isUnexpected = !isRunning && !isExited;
  var className = DockerUtil$MdworldHomeremoteDockerlist.toClassName([
        {
          TAG: /* Name */0,
          _0: styles["button-list-item"]
        },
        {
          TAG: /* Name */0,
          _0: styles["mui-button"]
        },
        {
          TAG: /* NameOn */1,
          _0: styles["button-error"],
          _1: isUnexpected
        }
      ]);
  var name = container.Names.map(function (name) {
          return name.slice(1);
        }).join(" ");
  var prefix = isRunning ? "" : React.createElement(SVGCross$MdworldHomeremoteDockerlist.make, {
          width: "30",
          fill: "#f44336"
        });
  var suffix = isRunning ? React.createElement(SVGCheck$MdworldHomeremoteDockerlist.make, {
          width: "30",
          fill: "#4caf50"
        }) : "";
  return React.createElement("tr", undefined, React.createElement("td", undefined, React.createElement(ButtonWithConfirm$MdworldHomeremoteDockerlist.make, {
                      onClick: isRunning ? (function (param) {
                            DockerApi$MdworldHomeremoteDockerlist.stopContainer(url, id, onError).then(function (_response) {
                                    return DockerApi$MdworldHomeremoteDockerlist.getDockerList(url, onError);
                                  }).then(function (containerList) {
                                  Curry._1(setContainers, (function (_prev) {
                                          return containerList;
                                        }));
                                  return Promise.resolve(containerList);
                                });
                            
                          }) : (function (param) {
                            var __x = DockerApi$MdworldHomeremoteDockerlist.startContainer(url, id, onError);
                            var __x$1 = __x.then(function (_response) {
                                  return DockerApi$MdworldHomeremoteDockerlist.getDockerList(url, onError);
                                });
                            __x$1.then(function (containerList) {
                                  Curry._1(setContainers, (function (_prev) {
                                          return containerList;
                                        }));
                                  return Promise.resolve(containerList);
                                });
                            
                          }),
                      status: name + ": " + container.State + ". " + container.Status,
                      question: isRunning ? "Do you want to stop " + name + "?" : "Do you want to start " + name + "?",
                      className: className,
                      confirmButtonStyle: confirmButtonStyle,
                      children: null,
                      key: id
                    }, prefix, React.createElement("span", undefined, container.State), suffix)), React.createElement("td", undefined, name));
}

var make = DockerListItem;

exports.styles = styles;
exports.make = make;
/* styles Not a pure module */
